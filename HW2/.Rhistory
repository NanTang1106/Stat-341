g <- ggplot(data = prop.data, aes(x = Size, y = Proportion, lab = size.lab))
g + geom_bar(stat = "identity") + geom_text(aes(label = size.lab))
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(data = dat, mapping = aes(x = size.temp2)) +geom_bar(aes(fill = prop.sum))
ggplot(data = dat, mapping = aes(x = size.temp2)) +geom_bar())
ggplot(data = dat, mapping = aes(x = size.temp2)) +geom_bar()
ggplot(data = dat, mapping = aes(x = size.temp2), y = prop.sum) +geom_bar()
size.temp2
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(data = dat, mapping = aes(x = size.temp2, y = prop.sum) +geom_bar()
1
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(data = dat, mapping = aes(x = size.temp2, y = prop.sum)) + geom_bar()
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(data = dat, mapping = aes(x = size.temp2, y = prop.sum)) + geom_bar(stat="identity"
)
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(data = dat, mapping = aes(x = size.temp2, y = prop)) + geom_bar(stat="identity")
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(mapping = aes(x = size.temp2, y = prop.sum)) + geom_bar(stat="identity")
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(mapping = aes(x = size.temp2, y = prop.sum[1 : 4])) + geom_bar(stat="identity")
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
dat <- data.frame(size = size.temp, prop = prop.sum[1 : 4])
ggplot(mapping = aes(x = size.temp2, y = prop.sum[1 : 4])) + geom_bar()
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("10", "20", "100 ", "500")
ggplot(mapping = aes(x = size.temp, y = prop.sum[1 : 4])) + geom_bar(stat="identity")
size.temp = c(10, 20, 30, 40)
size.temp2 <- c("ccc", "ddd", "100 ", "500")
ggplot(mapping = aes(x = size.temp2, y = prop.sum[1 : 4])) + geom_bar(stat="identity")
data("diamonds")
head(diamonds)
ggplot(data = diamonds, mapping = aes(x = clarity)) + geom_bar(aes(fill = cut))
mydata <- read.table("E:/Desktop/test1.txt", header = TRUE, sep = ",")
mydata <- read.table("E:/Desktop/temp1.txt", header = TRUE, sep = ",")
View(mydata)
plot(mydata)
a
droughtDataRevise <- transform(droughtData, sqrt.Value = sqrt(Value))
droughtData <- read.table("E:/Desktop/temp1.txt", header = TRUE, sep = ",")
droughtDataRevise <- transform(droughtData, sqrt.Value = sqrt(Value))
mydata2 <- sqrt(mydata$Value)
View(mydata2)
View(droughtDataRevise)
data.sqrttrans(-1)
data.sqrttrans <- function(x) {
if (x > 0) {
return(x)
} else {
return(-sqrt(abs(x)))
}
}
data.sqrttrans(-1)
data.sqrttrans(-4)
droughtDataRevise <- transform(droughtData, sqrt.Value = data.sqrttrans(Value))
droughtDataRevise <- transform(droughtData, sqrt.Value = lapply(Value), data.sqrttrans)
droughtDataRevise <- transform(droughtData, sqrt.Value = lapply(Value), data.sqrttrans(Value))
library(dplyr)
install.packages('dplyr')
library(dplyr)
View(droughtData)
asd = droughtData %>% mutate("Sqrt" = x > 0 ? sqrt(x) : -sqrt(abs(x)))
asd = droughtData %>% mutate("Sqrt" = Value > 0 ? sqrt(Value) : -sqrt(abs(Value)))
asd = droughtData %>% mutate("Sqrt" = Value > 0 ? sqrt(Value) : -sqrt(abs(Value)))
asd = droughtData %>% mutate("Sqrt" = data.sqrttrans(Value))
View(asd)
revise <- data.sqrttrans(droughtData$Value)
data.sqrttrans <- function(values) {
for (x in values) {
if (x > 0) {
x = sqrt(x)
} else {
x = -sqrt(abs(x))
}
}
}
revise <- data.sqrttrans(droughtData$Value)
source('E:/Desktop/STAT 498/Homework/FinalProject/DroughtIndex.R')
View(asd)
data.sqrttrans <- function(values) {
for (x in values) {
if (x > 0) {
values[x] = sqrt(x)
} else {
values[x] = -sqrt(abs(x))
}
}
}
revise <- data.sqrttrans(droughtData$Value)
data.sqrttrans <- function(values) {
for (x in values) {
if (values[x] > 0) {
values[x] = sqrt(x)
} else {
values[x] = -sqrt(abs(x))
}
}
}
revise <- data.sqrttrans(droughtData$Value)
data.sqrttrans <- function(values) {
for (x in length(values)) {
if (values[x] > 0) {
values[x] = sqrt(x)
} else {
values[x] = -sqrt(abs(x))
}
}
}
revise <- data.sqrttrans(droughtData$Value)
length(droughtData)
sum(droughtData)
length(droughtData)
nrow(droughtData)
data.sqrttrans <- function(x) {
if (x > 0) {
return(x = sqrt(x))
} else {
return(x = -sqrt(abs(x)))
}
}
revise <- c()
for(i in 1:123) {
revise <- c(revise, data.sqrttrans(droughtData[i]))
}
for(i in 1:123) {
revise <- c(revise, data.sqrttrans(droughtData$Value[i]))
}
revise
revise <- null
for(i in 1:123) {
revise <- c(revise, data.sqrttrans(droughtData$Value[i]))
}
revise <- numeric()
for(i in 1:123) {
revise <- c(revise, data.sqrttrans(droughtData$Value[i]))
}
droughtDataRevise <- cbind(droughtData, revise)
View(droughtDataRevise)
library(ggplot2)
ggplot(data = droughtDataRevise) + geom_line(mapping = aes(x = Date, y = revise))
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise))
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), method = "lm")
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise, color = "red"), method = "lm")
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm")
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise), color = "yellow")
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise))
ggplot(data = droughtDataRevise) + geom_smooth(se = F, mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise))
ggplot(data = droughtDataRevise) + geom_smooth(se = F, mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue", se = F) +
geom_point(mapping = aes(x = Date, y = revise))
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise))
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise)) +
labs(
title = "Time - Sqrt of Drought Value",
x ="Yearly 1895/12 - 2017/12",
y ="Drought Value",
)
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise)) +
labs(
title = "Time - Sqrt of Drought Value",
x ="Yearly 1895/12 - 2017/12",
y ="Drought Value"
)
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise)) +
labs(
title = "Time - Square Root of Drought Value",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Drought Value"
)
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_point(mapping = aes(x = Date, y = revise)) +
labs(
title = "Time - Square Root of Palmer Drought Index",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Palmer Drought Index"
)
install.packages("forecastr")
install.packages("forecast")
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_line(mapping = aes(x = Date, y = revise)) +
labs(
title = "Time - Square Root of Palmer Drought Index",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Palmer Drought Index"
)
library(ggplot2)
library(forecast)
droughtData <- read.table("../temp1.txt", header = TRUE, sep = ",")
data.sqrttrans <- function(x) {
if (x > 0) {
return(x = sqrt(x))
} else {
return(x = -sqrt(abs(x)))
}
}
revise <- numeric()
for(i in nrow(droughtData)) {
revise <- c(revise, data.sqrttrans(droughtData$Value[i]))
}
droughtDataRevise <- cbind(droughtData, revise)
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_line(mapping = aes(x = Date, y = revise)) +
labs(
title = "Time - Square Root of Palmer Drought Index",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Palmer Drought Index"
)
droughtData <- read.table("../temp1.txt", header = TRUE, sep = ",")
data.sqrttrans <- function(x) {
if (x > 0) {
return(x = sqrt(x))
} else {
return(x = -sqrt(abs(x)))
}
}
revise <- numeric()
for(i in 1:nrow(droughtData)) {
revise <- c(revise, data.sqrttrans(droughtData$Value[i]))
}
droughtDataRevise <- cbind(droughtData, revise)
ggplot(data = droughtDataRevise) + geom_smooth(mapping = aes(x = Date, y = revise), color = "red", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "blue") +
geom_line(mapping = aes(x = Date, y = revise)) +
labs(
title = "Time - Square Root of Palmer Drought Index",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Palmer Drought Index"
)
droughtTseries <- ts(droughtData)
droughtTseries <- ts(droughtData[,2])
View(droughtTseries)
seasonplot(droughtTseries)
ndiffs(droughtTseries)
acf(droughtTseries)
pacf(droughtTseries)
Acf(droughtT)
Acf(droughtTseries)
auto.arima(droughtTseries)
plot(auto.arima(droughtTseries))
library(tseries)
adf.test(droughtTseries)
kpss.test(droughtTseries)
drought.kpss <- kpss.test(droughtTseries)
drought.stl <- stl(droughtTseries, s.window = "periodic")
drought.adf <- adf.test(droughtTseries)
drought.adf
drought.kpss
drought.arima <- auto.arima(droughtTseries)
forecast(drought.arima)
plot(forecast(drought.arima))
drought.arima
autoplot(droughtData)
autoplot(droughtTseries)
autoplot(drought.arima)
drought.forecast <- forecast(drought.arima)
autoplot(drought.forecast)
autoplot(droughtTseries, color = "red")
?autoplot
autoplot(drought.forecast) + labs(
title = "Time - Square Root of Palmer Drought Index",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Palmer Drought Index"
)
autoplot(droughtTseries) + autoplot(drought.forecast)
autoplot(droughtTseries)
autoplot(drought.forecast)
rainData <- read.table("E:/Desktop/STAT 498/Homework/FinalProject/CAtemp", header = TRUE, sep = ",")
rainData <- read.table("E:/Desktop/STAT 498/Homework/FinalProject/CAtemp.txt", header = TRUE, sep = ",")
droughtData <- read.table("E:/Desktop/STAT 498/Homework/FinalProject/CAdrought.txt", header = TRUE, sep = ",")
rain.drou.cor <- cor(rainData$Value, droughtData$Value)
View(rainData)
TempData <- read.table("E:/Desktop/STAT 498/Homework/FinalProject/CAtemp.txt", header = TRUE, sep = ",")
droughtData <- read.table("E:/Desktop/STAT 498/Homework/FinalProject/CAdrought.txt", header = TRUE, sep = ",")
rain.drou.cor <- cor(TempData$Value, droughtData$Value)
plot(x = TempData$Value, y = droughtData$Value)
View(TempData)
View(droughtData)
TempData <- read.table("E:/Desktop/STAT 498/Homework/FinalProject/CAtemp.txt", header = TRUE, sep = ",")
droughtData <- read.table("E:/Desktop/STAT 498/Homework/FinalProject/CAdrought.txt", header = TRUE, sep = ",")
rain.drou.cor <- cor(TempData$Value, droughtData$Value)
plot(x = TempData$Value, y = droughtData$Value)
drought.temp.data <- cbind(droughtData$Value, TempData$Value)
View(drought.temp.data)
View(drought.temp.data)
Tempeture <- TempData$Value
Drought <- droughtData$Value
rain.drou.cor <- cor(Tempeture, Drought)
drought.temp.data <- cbind(Tempeture, Drought)
View(drought.temp.data)
ggplot(data = drought.temp.data) + geom_smooth(mapping = aes(x = Tempeture, y = Drought))
drought.temp.data <- data.frame(Tempeture, Drought)
ggplot(data = drought.temp.data) + geom_smooth(mapping = aes(x = Tempeture, y = Drought))
ggplot(data = drought.temp.data) +
geom_smooth(mapping = aes(x = Tempeture, y = Drought)) +
geom_point(mapping = aes(x = Tempeture, y = Drought)) +
labs(
title = "Drought - Temperature (F) Regression Line 1895/12 - 2017/12",
x ="Temperature (F)",
y ="Palmer Drought Index"
)
nrow(permutations(n=52, r=5))
install.packages('gtools')
library(gtools)
nrow(permutations(n=52, r=5))
52*51*50*49*48
/4!
qnorm(0.8)
0.8416*sqrt(9942)+16036-0.5
0.5/0.2
pnorm(-2.5)
qnorm(0.8)
0.8416*12=70
0.8416*12+70
qnorm(0.54)
0.1004*12+70
x<-213/216
x^65 - x^75
x^64 - x^75
readwd
checkwd
setwd("C:/Users/tangn/Google Drive/STAT 341")
bus_count <- read.xlsx("Bus_Count_StevensWay.xlsx")
bus_count <- read.csv("Bus_Count_StevensWay.xlsx")
bus_count <- read.csv("Bus_Count_StevensWay.csv")
setwd("C:/Users/tangn/Google Drive/STAT 341/HW2")
bus_count <- read.csv("Bus_Count_StevensWay.csv")
Bus_Count_StevensWay <- read_csv("C:/Users/tangn/Google Drive/STAT 341/HW2/Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
library(readr)
Bus_Count_StevensWay <- read_csv("C:/Users/tangn/Google Drive/STAT 341/HW2/Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
Bus_Count <- read_csv("C:/Users/tangn/Google Drive/STAT 341/HW2/Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
Bus_Count <- read_csv("C:/Users/tangn/Google Drive/STAT 341/HW2/Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
colnames(Bus_Count) <- c("Line", "Time")
Bust_Count[,1]
Bus_Count[,1]
Bus_Count[,1] <- factor(Bus_Count[,1])
factor(Bus_Count[,1])
as.factor(Bus_Count[,1])
as.factor(Bus_Count$Line)
Bus_Count$Line <- as.factor(Bus_Count$Line)
Line_factor <- as.factor(Bus_Count$Line)
Bus_Count = cbind(Bus_Count, Line_factor)
source('C:/Users/tangn/Google Drive/STAT 341/HW2/bus_count.R')
View(Bus_Count)
str(Line_factor)
levels(Line_factor)
source('C:/Users/tangn/Google Drive/STAT 341/HW2/bus_count.R')
waiting_time <- c(0)
for(i in 1:50){
temp <- Bus_Count$Time[i] - Bus_Count$Time[i + 1]
waiting_time <- c(waiting_time, temp)
}
waiting_time
ms(waiting_time)
library(lubridate)
ms(waiting_time)
waiting_time <- c(0)
for(i in 1:49){
temp <- Bus_Count$Time[i+1] - Bus_Count$Time[i]
waiting_time <- c(waiting_time, temp)
}
waiting_time
plot(waiting_time)
mean(waiting_time)
0.4*exp(-0.4)
sort(waiting_time)
plot(sort(waiting_time))
waiting_time_factor <- as.factor(waiting_time)
waiting_time_factor
library(dplyr)
waiting_time[0]
Bus_Count = cbind(Bus_Count, waiting_time)
Bus_Count <- read_csv("C:/Users/tangn/Google Drive/STAT 341/HW2/Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
colnames(Bus_Count) <- c("Line", "Time")
Bus_Count = cbind(Bus_Count, waiting_time)
mean(waiting_time[1:20])
mean(waiting_time)
var(waiting_time)
18990.37/60/60
var(waiting_time[1:20])
var(c(1,1))
var(c(1,2,3))
library(readr)
Bus_Count <- read_csv("C:/Users/tangn/Google Drive/STAT 341/HW2/Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
colnames(Bus_Count) <- c("Line", "Time")
Line_factor <- as.factor(Bus_Count$Line)
Bus_Count = cbind(Bus_Count, Line_factor)
levels(Line_factor)
setwd("C:\Users\Nolan Tang\Google Drive\STAT 341\HW2")
setwd("C:/Users/Nolan Tang/Google Drive/STAT 341/HW2")
Bus_Count <- read_csv("Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
library(readr)
library(lubridate)
library(dplyr)
Bus_Count <- read_csv("Bus_Count_StevensWay.csv",
col_names = FALSE, col_types = cols(X2 = col_time(format = "%H:%M")))
colnames(Bus_Count) <- c("Line", "Time")
Line_factor <- as.factor(Bus_Count$Line)
levels(Line_factor)
waiting_time <- c(0)
for(i in 1:49){
temp <- Bus_Count$Time[i+1] - Bus_Count$Time[i]
waiting_time <- c(waiting_time, temp)
}
waiting_time
group_by(waiting_time)
?group_by
View(Bus_Count)
View(Bus_Count)
waiting_time_levels <- as.factor(waiting_time)
Bus_Count = cbind(Bus_Count, waiting_time)
group_by(waiting_time, waiting_time_levels)
group_by(Bus_Count, waiting_time_levels)
plot(Bus_count$waiting_time)
plot(Bus_Count$waiting_time)
plot(waiting_time)
hist(waiting_time)
waiting_time_levels
levels(waiting_time)
levels(waiting_time_levels)
group_by(waiting_time,levels(waiting_time_levels))
g <- ggplot(aes(waiting_time))
g + geom_bar()
g <- ggplot(aes(waiting_time))
g + geom_bar()
ggplot(aes(waiting_time)) + geom_bar()
library(ggplot2)
ggplot(aes(waiting_time))
+ geom_bar()
ggplot(waiting_time)
+ geom_bar()
ggplot(waiting_time) +
geom_bar()
ggplot(aes(waiting_time)) +
geom_bar()
ggplot(aes(waiting_time)) +
geom_bar(aes(waiting_time))
ggplot(Bus_Count, aes(x = waiting_time)) +
geom_histogram()
ggplot(Bus_Count, aes(x = waiting_time)) +
geom_histogram() +
labs(title="Waiting Time",
x="Waiting Time",
y="Frequency") +
scale_x_continuous(levels(waiting_time_levels))+
theme(theme_classic())
ggplot(Bus_Count, aes(x = waiting_time)) +
geom_histogram() +
labs(title="Waiting Time",
x="Waiting Time",
y="Frequency") +
theme(theme_classic())
ggplot(Bus_Count, aes(x = waiting_time)) +
geom_histogram() +
labs(title="Waiting Time",
x="Waiting Time",
y="Frequency")
ggplot(Bus_Count, aes(x = waiting_time)) +
geom_histogram() +
labs(title="Waiting Time",
x="Waiting Time",
y="Frequency") +
scale_x_continuous(levels(waiting_time_levels))
theme_set(theme_classic())
ggplot(Bus_Count, aes(x = waiting_time)) +
geom_histogram() +
labs(title="Waiting Time",
x="Waiting Time",
y="Frequency") +
theme_set(theme_classic())
var(waiting_time[1:20])
mean(waiting_time[1:20])
mean(waiting_time)
